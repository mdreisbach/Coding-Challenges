//These are my solutions to svpino's five programming problems that are meant to all be completed under an hour
//source: https://blog.svpino.com/2015/05/07/five-programming-problems-every-software-engineer-should-be-able-to-solve-in-less-than-1-hour

//Problem 1: Write three functions that compute the sum of the numbers in a given list
//For Loop

int compute(ArrayList<Integer> listOfNumbers){
	int sum = 0;
	for(;!listOfNumbers.isEmpty();){
		sum+= listOfNumbers.remove(0);
	}
	return sum;
}
//While-loop

int compute(ArrayList<Integer> listOfNumbers){
	int sum = 0;
	while(!listOfNumbers.isEmpty()){
		sum+= listOfNumbers.remove(0);
	}
	return sum;
}
//Recursion

int compute(ArrayList<Integer> listOfNumbers){
	if (listOfNumbers.size()==1){
		return listOfNumbers.remove(0);
	} else {
		return listOfNumbers.remove(0) + compute(listOfNumbers); 
	}	
}

//Problem 2: Write a function that combines two lists by alternatingly taking elements. 
	ArrayList<String> combine(ArrayList<String> list1, ArrayList<String> list2){
		ArrayList<String> result = new ArrayList<String>();
		int length = list1.size() + list2.size();
		for(int i=0;i<length;i++){
			if((i%2)==0) {
				if(list1.isEmpty()) {
					result.add( list2.remove(0));
					} else { 
						 result.add( list1.remove(0)); }
			} else { 
				if(list2.isEmpty()) {
						 result.add( list1.remove(0));
				} else { result.add( list2.remove(0)); }
			}
		} return result;
	}
  
//Problem 3: Write a function that computes the list of the first 100 Fibonacci numbers.
//This should yeild 354224848179261915075, and it does :)

	double fibonacci(){
		double a = 0;
		double b = 1;
		double fibHundred  = 0;
		for(int i = 2;i<=100;i++){
			fibHundred = a + b;
			a = b;
			b = fibHundred;
		}
		return fibHundred;		
	}
  
//Problem 4: Write a function that given a list of non negative integers, arranges them such that they
//form the largest possible number. For example given [50, 2, 1, 9], the largest formed number is 95021.

	void largestNumber(Integer[] mylist){
		int temp;
		for(int i=0;i<mylist.length;i++){
			for(int j =1; j<(mylist.length-i); j++){		
				if ((Integer.parseInt((""+mylist[j-1]+mylist[j]))>Integer.parseInt((""+mylist[j]+mylist[j-1])))) {
					temp = mylist[j-1];
					mylist[j-1] = mylist[j];
					mylist[j] = temp;
		}}}
		Collections.reverse(Arrays.asList(mylist));
	}
  
//Problem 5:  Write a program that outputs all possibilities to put + or - or nothing between the
//numbers 1, 2, ..., 9 (in this order) such  that the result is always 100.  For example: 
//1 + 2 + 34 – 5 + 67 – 8 + 9 = 100.
//**NOTE** this is not my solution, this is Svpino's solution I found online. I failed to finished the
//last problem in time( I got pretty close! >.> ) and svpino's solution was the one closest to my mine.

public class Main {

    private static int TARGET_SUM = 100;
    private static int[] VALUES = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };

    static ArrayList add(int digit, String sign, ArrayList branches) {
        for (int i = 0; i < branches.size(); i++) {
            branches.set(i, digit + sign + branches.get(i));
        }

        return branches;
    }

    static ArrayList f(int sum, int number, int index) {
        int digit = Math.abs(number % 10);
        if (index >= VALUES.length) {
            if (sum == number) {
                ArrayList result = new ArrayList();
                result.add(Integer.toString(digit));
                return result;
            }
            else {
                return new ArrayList();
            }
        }

        ArrayList branch1 = f(sum - number, VALUES[index], index + 1);
        ArrayList branch2 = f(sum - number, -VALUES[index], index + 1);

        int concatenatedNumber = number >= 0
            ? 10 * number + VALUES[index]
            : 10 * number - VALUES[index];
        ArrayList branch3 = f(sum, concatenatedNumber, index + 1);

        ArrayList results = new ArrayList();

        results.addAll(add(digit, "+", branch1));
        results.addAll(add(digit, "-", branch2));
        results.addAll(add(digit, "", branch3));

        return results;
    }

    public static void main(String[] args) {
        for (String string : f(TARGET_SUM, VALUES[0], 1)) {
            System.out.println(string);
        }
    }
}
